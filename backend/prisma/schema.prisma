// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Source {
  SELF_SIGNUP
  INVITATION
}

model User {
  id                           String       @id @default(uuid())
  source                       Source       @default(SELF_SIGNUP)
  email                        String       @unique
  hashedPassword               String?
  firstName                    String?
  lastName                     String?
  onboarded                    Boolean      @default(false)
  emailConfirmationToken       String?      @unique
  emailConfirmationTokenSentAt DateTime?
  emailConfirmed               Boolean      @default(false)
  passResetToken               String?      @unique
  passResetTokenCreatedAt      DateTime?
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt
  memberships                  Membership[]
}

model Comment {
  id        String  @id @default(uuid())
  content   String
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
  article   Article @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  content     String
  publishedAt DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

model Article {
  id        String    @id @default(uuid())
  title     String
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Event {
  id        String   @id @default(uuid())
  name      String
  location  String
  date      DateTime
  organizer User     @relation(fields: [organizerId], references: [id])
  organizerId String
}


// Delete these

model Organization {
  id          String       @id @default(uuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
}

enum Role {
  OWNER
  MEMBER
}

enum MembershipStatus {
  INVITED
  ACTIVE
  INACTIVE
}

model Membership {
  id               String       @id @default(uuid())
  role             Role         @default(OWNER)
  status           MembershipStatus @default(ACTIVE)
  invitationToken  String?      @unique
  invitationSentAt DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  userId           String
  organizationId   String
  user             User         @relation(fields: [userId], references: [id])
  organization     Organization @relation(fields: [organizationId], references: [id])
}
